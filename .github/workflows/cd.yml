name: CD

on:
  push:
    branches:
      - main


jobs:
  prep-testbed:
    if: |
      !startsWith(github.event.head_commit.message, 'chore') &&
      !startsWith(github.event.head_commit.message, 'build: hotfix') &&
      !endsWith(github.event.head_commit.message, 'reformatted by jina-dev-bot')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - id: set-matrix
        run: |
          sudo apt-get install jq
          export value=$(bash scripts/get-all-test-paths.sh)
          echo "matrix=$value" >> $GITHUB_OUTPUT
          export value=$(bash scripts/get-all-oldproto-test-paths.sh)
          echo "matrix-oldproto=$value" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      matrix-oldproto: ${{ steps.set-matrix.outputs.matrix-oldproto }}

  docarray-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          # pip does not properly resolve dependency versions with syntax pip install --no-cache-dir ".[test,full]"
          pip install --no-cache-dir ".[test]"
          pip install --no-cache-dir ".[qdrant]"
          pip install --no-cache-dir ".[annlite]"
          pip install --no-cache-dir ".[weaviate]"
          pip install --no-cache-dir ".[elasticsearch]"
          pip install --no-cache-dir ".[redis]"
          pip install --no-cache-dir ".[full]"
          sudo apt-get install libsndfile1
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --cov=docarray --cov-report=xml \
            -v -s -m "not gpu" ${{ matrix.test-path }}
          echo "codecov_flag=docarray" >> $GITHUB_OUTPUT
        timeout-minutes: 30
        env:
          JINA_AUTH_TOKEN: "${{ secrets.JINA_AUTH_TOKEN }}"
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v3.1.1
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  docarray-oldproto-test:
    needs: prep-testbed
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.7]
        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix-oldproto)}}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install wheel
          # pip does not properly resolve dependency versions with syntax pip install --no-cache-dir ".[test,full]"
          pip install --no-cache-dir ".[test]"
          pip install --no-cache-dir ".[qdrant]"
          pip install --no-cache-dir ".[annlite]"
          pip install --no-cache-dir ".[weaviate]"
          pip install --no-cache-dir ".[elasticsearch]"
          pip install --no-cache-dir ".[redis]"
          pip install --no-cache-dir ".[full]"
          pip install --no-cache-dir "protobuf<3.20.0"
          sudo apt-get install libsndfile1
      - name: Test
        id: test
        run: |
          pytest --suppress-no-test-exit-code --cov=docarray --cov-report=xml \
            -v -s -m "not gpu" ${{ matrix.test-path }}
          echo "::set-output name=codecov_flag::docarray"
        timeout-minutes: 30
        env:
          JINA_AUTH_TOKEN: "${{ secrets.JINA_AUTH_TOKEN }}"
      - name: Check codecov file
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml"
      - name: Upload coverage from test to Codecov
        uses: codecov/codecov-action@v2
        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.7'
        with:
          file: coverage.xml
          flags: ${{ steps.test.outputs.codecov_flag }}
          fail_ci_if_error: false
          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  prerelease:
    needs: [docarray-test, docarray-oldproto-test]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
        with:
          fetch-depth: 100
      - name: Pre-release (.devN)
        run: |
          git fetch --depth=1 origin +refs/tags/*:refs/tags/*
          pip install twine wheel
          ./scripts/release.sh
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
          JINA_SLACK_WEBHOOK: ${{ secrets.JINA_SLACK_WEBHOOK }}
