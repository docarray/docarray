name: CI

on:
  push:
    branches:
      - main
      - feat-rewritte-v2
  pull_request:
    types: [opened, synchronize]
jobs:

  commit-lint:
    runs-on: ubuntu-latest
    steps:
      - name: find the prev warning if exist
        uses: peter-evans/find-comment@v1
        id: fc
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: "github-actions[bot]"
          body-includes: "bad commit message"
      - name: Delete comment if exist
        if: ${{ steps.fc.outputs.comment-id != 0 }}
        uses: actions/github-script@v3
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            github.issues.deleteComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: ${{ steps.fc.outputs.comment-id }},
            })
      - uses: actions/checkout@v2.5.0
        with:
          fetch-depth: 0
      - run: 'echo "module.exports = {extends: [''@commitlint/config-conventional'']}" > commitlint.config.js'
      - uses: wagoid/commitlint-github-action@v1
        env:
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      - name: if lint failed
        if: ${{ failure() }}
        uses: peter-evans/create-or-update-comment@v1
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Thanks for your contribution :heart:
            :broken_heart: Unfortunately, this PR has one ore more **bad commit messages**, it can not be merged. To fix this problem, please refer to:
            - [Commit Message Guideline for the First Time Contributor](https://github.com/jina-ai/jina/issues/553)
            - [Contributing Guideline](https://github.com/jina-ai/jina/blob/master/CONTRIBUTING.md)

            Note, other CI tests will *not* *start* until the commit messages get fixed.

            This message will be deleted automatically when the commit messages get fixed.
          reaction-type: "eyes"

  lint-ruff:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Lint with ruff
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install 

          # stop the build if there are Python syntax errors or undefined names
          poetry run ruff docarray
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          poetry run ruff docarray

  check-black:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: check black
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install --only dev 
          poetry run black --check .

        env:
          CHANGED_FILES: ${{ steps.file_changes.outputs.added_modified }}

  import-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: Prepare enviroment
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install -E common --without dev
      - name: Test basic import
        run: poetry run python -c 'from docarray import DocumentArray, Document'


  check-mypy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python 3.8
        uses: actions/setup-python@v4
        with:
          python-version: 3.8
      - name: check mypy
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install  
          poetry run mypy docarray

#  prep-testbed:
#    runs-on: ubuntu-latest
#    needs: [lint-ruff, check-black, import-test]
#    steps:
#      - uses: actions/checkout@v2.5.0
#      - id: set-matrix
#        run: |
#          sudo apt-get install jq
#          export value=$(bash scripts/get-all-test-paths.sh)
#          echo "matrix=$value" >> $GITHUB_OUTPUT
#    outputs:
#      matrix: ${{ steps.set-matrix.outputs.matrix }}

  docarray-test:
    needs: [lint-ruff, check-black, import-test]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: [3.8]
#        test-path: ${{fromJson(needs.prep-testbed.outputs.matrix)}}
        test-path: [tests/integrations, tests/units]
    steps:
      - uses: actions/checkout@v2.5.0
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      - name: Prepare environment
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
          poetry install -E common

      - name: Test
        id: test
        run: |
          poetry run pytest ${{ matrix.test-path }}
        timeout-minutes: 30
#        env:
#          JINA_AUTH_TOKEN: "${{ secrets.JINA_AUTH_TOKEN }}"
#      - name: Check codecov file
#        id: check_files
#        uses: andstor/file-existence-action@v1
#        with:
#          files: "coverage.xml"
#      - name: Upload coverage from test to Codecov
#        uses: codecov/codecov-action@v3.1.1
#        if: steps.check_files.outputs.files_exists == 'true' && ${{ matrix.python-version }} == '3.8'
#        with:
#          file: coverage.xml
#          flags: ${{ steps.test.outputs.codecov_flag }}
#          fail_ci_if_error: false
#          token: ${{ secrets.CODECOV_TOKEN }} # not required for public repos

  # just for blocking the merge until all parallel core-test are successful
  success-all-test:
    needs: [docarray-test, check-mypy, commit-lint]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: technote-space/workflow-conclusion-action@v2
      - name: Check Failure
        if: env.WORKFLOW_CONCLUSION == 'failure'
        run: exit 1
      - name: Success
        if: ${{ success() }}
        run: echo "All Done"
